基础类型：any 任意类型可赋值，void和any相反，表示没有类型，通常       函数不返回值得时候，其返回类型就是void。默认情况下undefined         和Null是所有类型的子类型。never类型表示的是那些永不存在的值      的类型。

函数：顶级的非方法式调用会将this视为window，（在严格模式下this为          undefined而不是window）；
          为了解决这个问题，我们可以在函数被返回时就绑好正确的this。            这样的话，无论之后怎么使用它，都会引用绑定的‘deck’对象           。 我们需要改变函数表达式来使用ECMAScript 6箭头语法。 箭          头函数能保存函数创建时的 this值，而不是调用时的值：
###箭头函数的一个特点就是可以保存函数创建时的this值，而不是调用时的值。

泛型：可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的          数据。 这样用户就可以以自己的数据类型来使用组件。
        我们需要一种方法使返回值的类型与传入参数的类型是相同的。 这里，我们使用了 类型变量，它是一种特殊的变量，只用于表示类型而不是值。
       类型变量 T 就为我们解决了这个问题， T帮助我们捕获用户传入的类型（比如：number），之后我们就可以使用这个类型。 之后我们再次使用了 T当做返回值类型。现在我们可以知道参数类型与返回值类型是相同的了。 这允许我们跟踪函数里使用的类型的信息。

装饰器：装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上。 装饰器使用 @expression这种形式，expression求值后必须为一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入。

class 声明创建一个基于原型继承的具有给定名称的新类。构造函数constructor就是为了实现类的继承从而成为类的一部分，constructor相当于原型上的构造函数，

super（）只能在构造函数中使用，并且必须使用this关键字前调用，作业是执行父类constructor构造函数。

super在子类的constructor中调用，是在子类中执行了父类的构造函数，其实是无关父类原型的，如果想到改变父类的原型方法，可以直接重名覆盖，如果想利用父类原型方法，也可以用super.method来引用。如果你不在constructor里写super并传入相应参数，那么相当于只继承原型方法。
每个类自己的constructor其实就是定义自身的属性和方法，而不是原型上的。可以直接使用this.abc来添加，this指自己，super指父类。
子类继承的时候不写constructor，则默认会把父类自身的属性和方法生成到子类。

 ###constructor 是一种用于创建和初始化class创建的对象的特殊方法。
在一个类中只能有一个名为 “constructor” 的特殊方法。 一个类中出现多次构造函数 (constructor)方法将会抛出一个 SyntaxError 错误。
在一个构造方法中可以使用super关键字来调用一个父类的构造方法。
如果没有显式指定构造方法，则会添加默认的 constructor 方法。
如果不指定一个构造函数(constructor)方法, 则使用一个默认的构造函数(constructor)。


flex容器： flex-wrap  flex-direction flex-flow(是wrap和direction的简写形式)
                justify-content  align-items  align-content










